#include <iostream>
using namespace std;

//***Структуры***

//Зачем это надо: иногда мы хотим организовать наши данные так, чтобы у одного элемента было несколько атрибутов.
//Своеобразный такой кастомный тип данных.

struct student {  //объявляем структуру - слово struct и её название
    string name;
    int marks[5] = {0, 0, 0, 0, 0};  //любой набор объектов любых типов
    bool isExpelled = false;  //можно сразу инициализировать переменные (и вообще, это неплохая идея)
    int num = 0;
};           //теперь нашей структурой можно пользоваться, как обычным типом данных

struct group {  //создадим ещё одну - почему нет
    student gr[20];
    int num = 0;  //Обратите внимания, имена переменных в структуре могут повторять имена переменных в других
    //структурах или main. В структуре student тоже есть параметр num, но они не конфликтуют, потому что
    //обращаемся мы к ним по-разному. Ниже посмотрим, как именно.
};

int main()
{
    student a;  //создали студента
    a.name = "Vasya"; //Через оператор "." мы обращаемся к переменным внутри нашей структуры
    a.num = 15;

    group x;      //создадим какую-нибудь группу и закинем в неё нашего студента
    x.num = 123;
    x.gr[0] = a;  //теперь наш студент есть в массиве студентов группы
    cout << x.gr[0].name << '\n';  //вот он, пожалуйста
    //Здесь мы обращаемся сначала к элементу структуры через ".", а потом к элементу элемента структуры

    x.gr[0].isExpelled = true; //но вот нашего студента отчислили. На том и закончим
}