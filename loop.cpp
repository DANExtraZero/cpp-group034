#include <iostream>
using namespace std;

int main()
{
    //***ЦИКЛЫ***

    //практически в каждой первой задаче возникает необходимость выполнить некое действие несколько раз.
    //Для этого в программировании существуют циклы. Они примерно одинаково работают во всех языках программирования,
    //так что информация исключительно полезная. К тому же, процесс написания кода для решения почти любой задачи
    //на практике представляет собой жонглирование циклами и массивами. Остальное - уже детали и мелочи.
    //Ну, покатились

    int a;
    cin >> a;
    //Цикл с условием - while. Вот его синтаксис: while(<условие>) {...}
    while (a != 0) {
        cout << a % 10 << '\n';
        a /= 10;
    }
    //что тут происходит? На каждой итерации цикла сначала происходит проверка условия, и, если оно истинно,
    //выполняется тело цикла. Это значит, что если условие изначально ложно, то цикл не выполнится ни разу.
    //Например, если на вход циклу выше подать а равное 0, он даже не запустится, и программа пойдёт дальше.
    //Кстати, об этом цикле. Он разбивает положительное число на отдельные цифры справа налево. Сначала
    //мы выводим последнюю цифру (остаток от деления на 10), потом удаляем её из числа (делим его на 10).
    //На следующей итерации цикла процесс повторяется уже с новой последней цифрой.

    int b;
    cin >> b;
    //вдруг по какой-то причине мы хотим осуществлять проверку не перед выполнением, а после.
    //Тогда нам на помощь приходит вот такая конструкция:
    do {
        cout << b % 10 << '\n';
        b /= 10;
    } while(b != 0);
    //Тут всё работает, в принципе, так же, но заметим, что в этом случае тело цикла выполнится
    //хотя бы один раз

    int c;
    cin >> c;
    //а что делать, если мы хотим выполнить цикл какое-то конкретное количество раз?
    //В принципе, можно в while сделать какую-нибудь переменную, которая будет считать круги.
    //Но есть способ проще - цикл for. Его синтаксис такой:
    //for (<переменная-счётчик>; <условие, при котором цикл продолжается>; <какие-то действия с счётчиком>) {...}

    for (int i = 0; i < c; ++i) {  //переменную можно инициализировать прямо в объявлении цикла
        cout << i << ' ';
    }
    cout << '\n';
    //Цикл выше выводит числа от 0 до с. Если с = 5, результат будет 0 1 2 3 4.
    //Что происходит: выполняется тело цикла при некотором i начиная с 0. После каждого круга с i происходит то,
    //что указанно в третьем аргументе в for (в нашем случае i увеличивается на 1). Как только условие во втором
    //аргументе перестаёт быть истинным, цикл останавливается. Если переменная i объявляется в описании цикла,
    //то вне его она не существует.

    //вложенные циклы:
    for (int i = 0; i <= 5; ++i) {
        for (char j = 'a'; j < 'f'; ++j) //если в цикле одна команда, можно не писать {}
            cout << j << ' ';
        cout << '\n';
    }
    //В принципе, ничего сложного. Просто один цикл внутри другого. Единственный нюанс - счётчики внутри вложенных
    //циклов лучше называть по-разному. Если вместо j написать i, программа, возможно, и скомпилируется (но не факт).
    //Но тогда при обращении к i во внутреннем цикле программа будет работать со счётчиком внутреннего цикла, а во
    //внещнем цикле - со счётчиком внешнего. Если вам захочется внутри второго цикла обратиться к обоим счётчикам,
    //у вас ничего не получится. Резюме: просто никогда так не делайте и называйте переменные по-разному.


    //пара полезных команд:
    for (int i = 0; i < 6; i += 2) {
        if (i == 4)
            break;  //моментально прекращает работу цикла и выходит из него
        else
            continue;  //прекращает работу текущей итерации и сразу переходит к следующей
    }
}